doctype html
html
  head
    title= "Ma page"
    link(rel='stylesheet', href='/style.css')
    script(src='/socket.io/socket.io.js')
    script(src='/scripts/client.js')
    script(src='/scripts/twemoji.min.js')
  body
    h1= message
    .username-container
      p Connect√© en tant que #{username}
      button#change-username Changer le pseudo
    .sidebar
      h2 Channels
      ul
        each channel, channelName in channels
          li
            a(href='#', data-channel=channelName)= channelName
              ul 
                each user in channel
                  if channelName !== 'Users'
                    li= user
    .sidebarRight
      h2 Utilisateurs connect√©s
      if users && users.length
        ul#user-list
          each user in users
            li= user
      else
        p Aucun utilisateur connect√©

    .main
      #typing-notification
      #messages
      form(action='/chat', method='post')
        input(id='message-input', type='text', name='message', placeholder='Tapez votre message ici...')
        button#emoji-button(type='button') üòÉ
        button(type='submit') Envoyer
      
    script.
      const socket = io.connect('http://localhost:9000');
      let username = prompt('Entrez votre pseudo');
      document.querySelector('.username-container p').textContent = `Connect√© en tant que ${username}`;

      socket.emit('newUser', username);

      document.querySelector('#change-username').addEventListener('click', () => {
        let newUsername = prompt('Entrez votre nouveau pseudo');
        socket.emit('updateUsername', { oldUsername: username, newUsername });
        username = newUsername;
        document.querySelector('.username-container p').textContent = `Connect√© en tant que ${username}`;
      });

      document.querySelector('form').addEventListener('submit', (event) => {
        event.preventDefault();
        let message = event.target.elements.message.value;
        socket.emit('sendMessage', { username, message });
        event.target.elements.message.value = '';
      });

      document.querySelector('#emoji-button').addEventListener('click', () => {
          // afficher la bo√Æte de dialogue d'emoji
          let emojiDialog = document.createElement('div');
          emojiDialog.classList.add('emoji-dialog');
          let emojiList = document.createElement('ul');
          emojiList.classList.add('emoji-list');
          Twemoji.parse(emojiList); // g√©n√®re la liste d'emojis
          emojiDialog.appendChild(emojiList);
          document.body.appendChild(emojiDialog);


      emojiList.addEventListener('click', (event) => {
          if (event.target.tagName === 'IMG') {
            let emojiSymbol = event.target.getAttribute('alt');
            let messageInput = document.querySelector('#message-input');
            messageInput.value += emojiSymbol;
            emojiDialog.remove(); // ferme la bo√Æte de dialogue d'emoji
          }
        });
      });

      socket.on('updateUserList', function(users) {
        let userList = document.getElementById('user-list');
        if (userList) {
          while (userList.firstChild) {
            userList.removeChild(userList.firstChild);
          }
          users.forEach(function(user) {
            let userElement = document.createElement('li');
            userElement.textContent = user;
            userList.appendChild(userElement);
          });
        }
      });

      socket.on('newMessage', function({ username, message }) {
        let messages = document.querySelector('#messages');
        let messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.innerHTML = `<p><strong>${username}</strong> : ${message}</p>`;
        messages.appendChild(messageElement);
      });
